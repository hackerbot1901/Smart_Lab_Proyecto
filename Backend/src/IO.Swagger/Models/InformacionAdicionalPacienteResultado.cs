/*
 * Smart Lab RA API
 *
 * Documento OAS para la API Smart Lab RA
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InformacionAdicionalPacienteResultado : IEquatable<InformacionAdicionalPacienteResultado>
    {
        /// <summary>
        /// Sucursal del paciente
        /// </summary>
        /// <value>Sucursal del paciente</value>

        [DataMember(Name = "sucursal")]
        public string Sucursal { get; set; }

        /// <summary>
        /// Código de barras del paciente
        /// </summary>
        /// <value>Código de barras del paciente</value>

        [DataMember(Name = "codigoBarras")]
        public string CodigoBarras { get; set; }

        /// <summary>
        /// Nombres del paciente
        /// </summary>
        /// <value>Nombres del paciente</value>

        [DataMember(Name = "nombres")]
        public string Nombres { get; set; }

        /// <summary>
        /// Apellidos del paciente
        /// </summary>
        /// <value>Apellidos del paciente</value>
        [DataMember(Name = "apellidos")]
        public string Apellidos { get; set; }

        /// <summary>
        /// Sexo del paciente
        /// </summary>
        /// <value>Sexo del paciente</value>

        [DataMember(Name = "sexo")]
        public string Sexo { get; set; }

        /// <summary>
        /// Nivel de urgencia del paciente
        /// </summary>
        /// <value>Nivel de urgencia del paciente</value>

        [DataMember(Name = "urgencia")]
        public bool Urgencia { get; set; }

        /// <summary>
        /// Estado de la orden del paciente
        /// </summary>
        [DataMember(Name = "estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Gets or Sets FechaNacimiento
        /// </summary>
        [DataMember(Name = "fecha_nacimiento")]
        public string FechaNacimiento { get; set; }


        /// <summary>
        /// Número de orden del paciente
        /// </summary>
        /// <value>Número de orden del paciente</value>

        [DataMember(Name = "numero_orden")]
        public int? NumeroOrden { get; set; }

        /// <summary>
        /// Gets or Sets Examenes
        /// </summary>

        [DataMember(Name = "examenes")]
        public List<InformacionAdicionalPacienteResultadoExamenes> Examenes { get; set; }

        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InformacionAdicionalPacienteResultado {\n");
            sb.Append("  Sucursal: ").Append(Sucursal).Append("\n");
            sb.Append("  CodigoBarras: ").Append(CodigoBarras).Append("\n");
            sb.Append("  Nombres: ").Append(Nombres).Append("\n");
            sb.Append("  Apellidos: ").Append(Apellidos).Append("\n");
            sb.Append("  Sexo: ").Append(Sexo).Append("\n");
            sb.Append("  Urgencia: ").Append(Urgencia).Append("\n");
            sb.Append("  FechaNacimiento: ").Append(FechaNacimiento).Append("\n");
            sb.Append("  NumeroOrden: ").Append(NumeroOrden).Append("\n");
            sb.Append("  Examenes: ").Append(Examenes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InformacionAdicionalPacienteResultado)obj);
        }

        /// <summary>
        /// Returns true if InformacionAdicionalPacienteResultado instances are equal
        /// </summary>
        /// <param name="other">Instance of InformacionAdicionalPacienteResultado to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InformacionAdicionalPacienteResultado other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Sucursal == other.Sucursal ||
                    Sucursal != null &&
                    Sucursal.Equals(other.Sucursal)
                ) &&
                (
                    CodigoBarras == other.CodigoBarras ||
                    CodigoBarras != null &&
                    CodigoBarras.Equals(other.CodigoBarras)
                ) &&
                (
                    Nombres == other.Nombres ||
                    Nombres != null &&
                    Nombres.Equals(other.Nombres)
                ) &&
                (
                    Apellidos == other.Apellidos ||
                    Apellidos != null &&
                    Apellidos.Equals(other.Apellidos)
                ) &&
                (
                    Sexo == other.Sexo ||
                    Sexo != null &&
                    Sexo.Equals(other.Sexo)
                ) &&
                (
                    Urgencia == other.Urgencia ||
                    Urgencia != null &&
                    Urgencia.Equals(other.Urgencia)
                ) &&
                (
                    FechaNacimiento == other.FechaNacimiento ||
                    FechaNacimiento != null &&
                    FechaNacimiento.Equals(other.FechaNacimiento)
                ) &&
                (
                    NumeroOrden == other.NumeroOrden ||
                    NumeroOrden != null &&
                    NumeroOrden.Equals(other.NumeroOrden)
                ) &&
                (
                    Examenes == other.Examenes ||
                    Examenes != null &&
                    Examenes.SequenceEqual(other.Examenes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Sucursal != null)
                    hashCode = hashCode * 59 + Sucursal.GetHashCode();
                if (CodigoBarras != null)
                    hashCode = hashCode * 59 + CodigoBarras.GetHashCode();
                if (Nombres != null)
                    hashCode = hashCode * 59 + Nombres.GetHashCode();
                if (Apellidos != null)
                    hashCode = hashCode * 59 + Apellidos.GetHashCode();
                if (Sexo != null)
                    hashCode = hashCode * 59 + Sexo.GetHashCode();
                if (Urgencia != null)
                    hashCode = hashCode * 59 + Urgencia.GetHashCode();
                if (FechaNacimiento != null)
                    hashCode = hashCode * 59 + FechaNacimiento.GetHashCode();
                if (NumeroOrden != null)
                    hashCode = hashCode * 59 + NumeroOrden.GetHashCode();
                if (Examenes != null)
                    hashCode = hashCode * 59 + Examenes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(InformacionAdicionalPacienteResultado left, InformacionAdicionalPacienteResultado right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InformacionAdicionalPacienteResultado left, InformacionAdicionalPacienteResultado right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
