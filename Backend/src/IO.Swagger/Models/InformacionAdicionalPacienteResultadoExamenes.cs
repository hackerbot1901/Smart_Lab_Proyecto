/*
 * Smart Lab RA API
 *
 * Documento OAS para la API Smart Lab RA
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InformacionAdicionalPacienteResultadoExamenes : IEquatable<InformacionAdicionalPacienteResultadoExamenes>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IdExterno
        /// </summary>

        [DataMember(Name="id_externo")]
        public int? IdExterno { get; set; }

        /// <summary>
        /// Gets or Sets Codigo
        /// </summary>

        [DataMember(Name="codigo")]
        public string Codigo { get; set; }

        /// <summary>
        /// Gets or Sets Nombre
        /// </summary>

        [DataMember(Name="nombre")]
        public string Nombre { get; set; }

        /// <summary>
        /// Gets or Sets FechaCreacion
        /// </summary>

        [DataMember(Name="fecha_creacion")]
        public string FechaCreacion { get; set; }

        /// <summary>
        /// Gets or Sets FechaTomaMuestra
        /// </summary>

        [DataMember(Name="fecha_toma_muestra")]
        public string FechaTomaMuestra { get; set; }

        /// <summary>
        /// Gets or Sets FechaReporte
        /// </summary>

        [DataMember(Name="fecha_reporte")]
        public string FechaReporte { get; set; }

        /// <summary>
        /// Gets or Sets FechaValidacion
        /// </summary>

        [DataMember(Name="fecha_validacion")]
        public string FechaValidacion { get; set; }

        /// <summary>
        /// Gets or Sets UsuarioValidacion
        /// </summary>

        [DataMember(Name="usuario_validacion")]
        public string UsuarioValidacion { get; set; }

        /// <summary>
        /// Gets or Sets Estado
        /// </summary>

        [DataMember(Name="estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Gets or Sets Valor
        /// </summary>

        [DataMember(Name="valor")]
        public int? Valor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InformacionAdicionalPacienteResultadoExamenes {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdExterno: ").Append(IdExterno).Append("\n");
            sb.Append("  Codigo: ").Append(Codigo).Append("\n");
            sb.Append("  Nombre: ").Append(Nombre).Append("\n");
            sb.Append("  FechaCreacion: ").Append(FechaCreacion).Append("\n");
            sb.Append("  FechaTomaMuestra: ").Append(FechaTomaMuestra).Append("\n");
            sb.Append("  FechaReporte: ").Append(FechaReporte).Append("\n");
            sb.Append("  FechaValidacion: ").Append(FechaValidacion).Append("\n");
            sb.Append("  UsuarioValidacion: ").Append(UsuarioValidacion).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  Valor: ").Append(Valor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InformacionAdicionalPacienteResultadoExamenes)obj);
        }

        /// <summary>
        /// Returns true if InformacionAdicionalPacienteResultadoExamenes instances are equal
        /// </summary>
        /// <param name="other">Instance of InformacionAdicionalPacienteResultadoExamenes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InformacionAdicionalPacienteResultadoExamenes other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IdExterno == other.IdExterno ||
                    IdExterno != null &&
                    IdExterno.Equals(other.IdExterno)
                ) && 
                (
                    Codigo == other.Codigo ||
                    Codigo != null &&
                    Codigo.Equals(other.Codigo)
                ) && 
                (
                    Nombre == other.Nombre ||
                    Nombre != null &&
                    Nombre.Equals(other.Nombre)
                ) && 
                (
                    FechaCreacion == other.FechaCreacion ||
                    FechaCreacion != null &&
                    FechaCreacion.Equals(other.FechaCreacion)
                ) && 
                (
                    FechaTomaMuestra == other.FechaTomaMuestra ||
                    FechaTomaMuestra != null &&
                    FechaTomaMuestra.Equals(other.FechaTomaMuestra)
                ) && 
                (
                    FechaReporte == other.FechaReporte ||
                    FechaReporte != null &&
                    FechaReporte.Equals(other.FechaReporte)
                ) && 
                (
                    FechaValidacion == other.FechaValidacion ||
                    FechaValidacion != null &&
                    FechaValidacion.Equals(other.FechaValidacion)
                ) && 
                (
                    UsuarioValidacion == other.UsuarioValidacion ||
                    UsuarioValidacion != null &&
                    UsuarioValidacion.Equals(other.UsuarioValidacion)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) && 
                (
                    Valor == other.Valor ||
                    Valor != null &&
                    Valor.Equals(other.Valor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IdExterno != null)
                    hashCode = hashCode * 59 + IdExterno.GetHashCode();
                    if (Codigo != null)
                    hashCode = hashCode * 59 + Codigo.GetHashCode();
                    if (Nombre != null)
                    hashCode = hashCode * 59 + Nombre.GetHashCode();
                    if (FechaCreacion != null)
                    hashCode = hashCode * 59 + FechaCreacion.GetHashCode();
                    if (FechaTomaMuestra != null)
                    hashCode = hashCode * 59 + FechaTomaMuestra.GetHashCode();
                    if (FechaReporte != null)
                    hashCode = hashCode * 59 + FechaReporte.GetHashCode();
                    if (FechaValidacion != null)
                    hashCode = hashCode * 59 + FechaValidacion.GetHashCode();
                    if (UsuarioValidacion != null)
                    hashCode = hashCode * 59 + UsuarioValidacion.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                    if (Valor != null)
                    hashCode = hashCode * 59 + Valor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InformacionAdicionalPacienteResultadoExamenes left, InformacionAdicionalPacienteResultadoExamenes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InformacionAdicionalPacienteResultadoExamenes left, InformacionAdicionalPacienteResultadoExamenes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
