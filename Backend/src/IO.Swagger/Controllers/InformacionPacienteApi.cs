/*
 * Smart Lab RA API
 *
 * Documento OAS para la API Smart Lab RA
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using IO.Swagger.Attributes;
using IO.Swagger.LaboratorioDB;
using IO.Swagger.Models;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;

namespace IO.Swagger.Controllers
{
    [Authorize]
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class InformacionPacienteApi : ControllerBase
    {
        /// <summary>
        /// Obtiene la información del paciente en base al código de barras proporcionado
        /// </summary>
        /// <param name="token">Token de autenticación</param>
        /// <param name="codigoBarras">Código de barras del paciente</param>
        /// <response code="200">Se encontró la muestra correspondiente al código de barras</response>
        /// <response code="401">No autorizado</response>
        /// <response code="404">Recurso no encontrado</response>
        /// <response code="500">Error interno del servidor</response>
  
        [HttpGet]
        [Route("/api/smart-lab-ra-api/v1/informacionPaciente/{codigoBarras}")]
        [ValidateModelState]
        [SwaggerOperation("InformacionPacienteCodigoBarrasGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InformacionAdicionalPaciente), description: "Se encontró la muestra correspondiente al código de barras")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error401), description: "No autorizado")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error404), description: "Recurso no encontrado")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error500), description: "Error interno del servidor")]

        public IActionResult InformacionPacienteCodigoBarrasGet([FromRoute] string codigoBarras)
        {
            try
            {
                using var _dbContext = new LaboratorioDbContext();               

                InformacionAdicionalPacienteResultado resultado = ObtenerInformacionAdicional(codigoBarras, _dbContext);

                if (resultado == null)
                {
                    return NotFound(new Error404 { Mensaje = "Recurso no encontrado" });
                }
                return Ok(resultado);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new Error500 { Mensaje = "Ocurrió un error al procesar la solicitud. " + ex.Message });
            }
        }


        private static InformacionAdicionalPacienteResultado ObtenerInformacionAdicional(string codigoBarras, LaboratorioDbContext _dbContext)
        {
            var muestraExistente = _dbContext.Muestras.SingleOrDefault(m => m.CodigoBarras == codigoBarras);
            if (muestraExistente == null)
            {
                return null;
            }
            var query = from muestra in _dbContext.Muestras
                        join paciente in _dbContext.Pacientes on muestra.PacienteId equals paciente.IdPaciente
                        join sucursal in _dbContext.Sucursals on muestra.SucursalId equals sucursal.IdSucursal
                        join examenMuestra in _dbContext.ExamenesMuestras on muestra.IdMuestra equals examenMuestra.MuestraId into examenesMuestra
                        where muestra.CodigoBarras == codigoBarras
                        select new InformacionAdicionalPacienteResultado
                        {
                            Sucursal = sucursal.NombreSucursal,
                            CodigoBarras = muestra.CodigoBarras,
                            Nombres = paciente.NombrePaciente,
                            Apellidos = paciente.ApellidoPaciente,
                            Sexo = paciente.Genero,
                            Urgencia = muestra.Urgencia,
                            FechaNacimiento = paciente.FechaNacimiento.HasValue ? paciente.FechaNacimiento.Value.ToString("yyyy-MM-dd") : null,
                            NumeroOrden = muestra.NumeroOrden,
                            Examenes = examenesMuestra.Select(em => new InformacionAdicionalPacienteResultadoExamenes
                            {
                                Id = em.IdExamenMuestra,
                                Codigo = em.Codigo,
                                Nombre = em.Nombre,
                                FechaCreacion = em.FechaCreacion.HasValue ? em.FechaCreacion.Value.ToString("yyyy-MM-dd") : null,
                                FechaTomaMuestra = em.FechaTomaMuestra.HasValue ? em.FechaTomaMuestra.Value.ToString("yyyy-MM-dd") : null,
                                FechaReporte = em.FechaReporte.HasValue ? em.FechaReporte.Value.ToString("yyyy-MM-dd") : null,
                                FechaValidacion = em.FechaValidacion.HasValue ? em.FechaValidacion.Value.ToString("yyyy-MM-dd") : null,
                                UsuarioValidacion = em.UsuarioValidacion,
                                Estado = em.Estado,
                                Valor = em.Valor
                            }).ToList()
                        };
            var resultado = query.SingleOrDefault();
            return resultado;
        }
    }
}